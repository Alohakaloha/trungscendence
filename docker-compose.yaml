services:
  postgres:
    image: "postgres:16.1"
    container_name: "postgres"
    environment:
      POSTGRES_DB : ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST : ${DB_HOST}
      POSTGRES_PORT : ${DB_PORT}
    volumes:
     - ./postgresql/data:/var/lib/postgresql/data
    networks:
      - t_network
    env_file:
      - .env
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -d mydatabase -U myuser"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5

    ports: 
      - "5432:5432"
    restart: on-failure

  django:
    container_name: django_web
    build:
      context: ./django
      dockerfile: Dockerfile
    ports:
      - "7000:7000"
    networks:
      - t_network
    command:
        ["/code/start.sh"]
    volumes:
      - ./django/backend:/code
      - ./django/start.sh:/code/start.sh
      - static_volume:/code/staticstuff
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DJANGO_SETTINGS_MODULE: backend.settings

    depends_on:
      - postgres
    env_file:
      - .env
    # healthcheck:
    #   test: ["CMD-SHELL", "curl --silent --fail localhost:7000 || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 30s

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    networks:
      - t_network
    volumes:
      - static_volume:/code/staticstuff
    ports:
      - "443:443"
      - "8000:8000"
    depends_on:
      - django
    restart: on-failure

  redis:
    image: "redis:latest"
    container_name: "redis"
    ports:
      - "6379:6379"
    networks:
      - t_network


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - t_network

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    environment:
      # increases the log level from info to debug
      - GF_LOG_LEVEL=debug
      - GF_SECURITY_ADMIN_USER=${DB_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${DB_PASSWORD}
    ports:
      - '3000:3000'
    volumes:
      # - ./monitoring/grafana/custom.ini:/etc/grafana/custom.ini
      # - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
      - 'grafana_storage:/var/lib/grafana'
    networks:
      - t_network

  blackbox:
    image: prom/blackbox-exporter:latest
    # privileged: true
    # volumes:
    #   - ./monitoring/blackbox/config.yml:/etc/blackbox_exporter/config.yml
    ports:
      - '9115:9115'
    networks:
      - t_network

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    # network_mode: host # default port 9100
    ports:
      - '9100:9100'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - t_network

volumes:
  static_volume: {}
  prometheus_data: {}
  grafana_storage: {}


networks:
  t_network: {}